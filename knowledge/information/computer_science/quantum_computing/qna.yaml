version: 3
domain: ibm_research
created_by: Kenneth Ocheltree
seed_examples:
  - context: |
      A Qiskit pattern is a general framework for breaking down domain-specific problems and contextualizing
      required capabilities in stages. This allows for the seamless composability of new capabilities developed by
      IBM Quantum researchers (and others) and enables a future in which quantum computing tasks are performed by
      powerful heterogenous (CPU/GPU/QPU) computing infrastructure. Blocks or groups of blocks perform the steps
      of a pattern, with the Qiskit SDK providing an important foundational layer, supported by other tools
      or services developed by IBM Quantum or the quantum open-source community. Qiskit patterns allow domain experts
      to specify a problem and compose the tooling (blocks) that achieves a Qiskit pattern.
      That pattern can then be executed locally, through cloud services, or deployed with Qiskit Serverless.
      The four steps of a Qiskit pattern are as follows:
      1. Map problem to quantum circuits and operators
      2. Optimize for target hardware
      3. Execute on target hardware
      4. Post-process results
      
    questions_and_answers:
      - question: What is a Qiskit pattern?
        answer: |
          A Qiskit pattern is a general framework for breaking down domain-specific problems and contextualizing
          required capabilities in stages
      - question: What are the steps in a Qiskit pattern?
        answer: |
          The steps of a Qiskit pattern are: 1. Map problem to quantum circuits and operators, 
          2. Optimize for target hardware, 3. Execute on target hardware, and 4. Post-process results
      - question: What are the different ways that a Qisket pattern can be executed?
        answer: |
          A Qisket pattern can be executed locally, through cloud services, or deployed with Qiskit Serverless.
  - context: |        
      Map problem to quantum circuits and operators
      This step describes how a user starts with a classical problem and figures out how to map it to
      a quantum computer. For example, in applications such as chemistry and quantum simulation, 
      this step generally involves constructing a quantum circuit 
      representing the Hamiltonian you are attempting to solve. During this step, for certain problems, 
      it might also be desirable to specify the mapping of the problem onto qubits in the heavy-hex (or gross)
      lattice of IBM hardware from the outset if the structure of the problem lends itself to optimization earlier. 
      It is also worth considering at this point what the outcome of the particular algorithm will be in preparation
      for the later execute step - for example, if the desired outcome involves inferring correlation functions using
      Hadamard tests, you might prepare to use Sampler, whereas specifying observables would use
      the Estimator and could provide many error mitigation options.
      The output of this step is normally a collection of circuits or quantum operators that can be optimized 
      for hardware in the next step.
      
      Optimize for target hardware
      In this step you take the abstract circuits (or operators) produced from the map step and perform a series of
      optimizations on them. This can include mapping the route and layout of the circuit to physical qubit hardware, 
      converting to basis gates of the hardware, and reducing the number of operations, all designed to optimize the 
      likelihood of success in the later execute step. At this point you might also wish to test out your circuits 
      with a simulator before executing on real hardware in the next step.
      During this step, abstract circuits must be transpiled to Instruction Set Architecture (ISA) circuits. 
      An ISA circuit is one that only consists of gates understood by the target hardware (basis gates), 
      and any multi-qubit gates needed to obey any connectivity constraints (coupling map). 
      Only ISA circuits can be run on IBM hardware using IBM Qiskit Runtime.  
      
    questions_and_answers: 
      - question: What happens in the optimize for target hardware step?
        answer: |
          Optimizations are performed on the abstract circuits produced by the map step.    
      - question: For chemistry and quantum simulation, how is the problem typically mapped to quantum circuits
          and operators?
        answer: |
          The mapping generally involves constructing a quantum circuit representing the Hamiltonian
          you are attempting to solve.
      - question: In the optimize for target hardware step, what are abstract circuits transpiled into?
        answer: |
          Instruction Set Architecture (ISA) circuits
          
  - context: |           
      Execute on target hardware
      This step involves running your circuits on hardware and produces the outputs of the quantum computation.
      The ISA circuits produced in the previous step can be executed using either a Sampler or Estimator primitive
      from Qiskit Runtime, initialized locally on your computer or from a cluster or 
      other heterogeneous compute environment. These can be executed in a Batch, 
      which allows parallel transpilation for classical computational efficiency - or a Session, 
      which allows iterative tasks to be implemented efficiently without queuing delays. 
      During this step, there is also the option to configure certain error suppression and mitigation techniques 
      provided by Qiskit Runtime.
      Depending on whether you are using the Sampler or Estimator primitive, 
      the outcome of this step will be different. If using the Sampler, the output will be per-shot measurements 
      in the form of bitstrings. If using the Estimator, the output will be expectation values of observables
      corresponding to physical quantities or cost functions.
      
      Post-process results
      This final step involves stitching the outputs from the prior step back together to obtain the desired result. 
      This can involve a range of classical data-processing steps such as visualizing results, readout error mitigation
      techniques, marginalizing quasi-probability distributions to ascertain results on smaller sets of qubits,
      or post-selection on inherent properties of the problem, such as total spin, parity, or particle conservation
      by removing unphysical observables.
      As the field moves from bespoke circuit construction to utility-scale workflows, the flexibility and ease with
      which Qiskit patterns allow users to compose the different steps of the pattern opens quantum computing to a wide variety
      of applications and techniques for easy use by quantum computational scientists.    
    questions_and_answers:
      - question: what is the Qisket pattern step where circuits are run on hardware?
        answer: |
          Execute on target hardware
      - question: what is the Qisket pattern step where outputs are stitched back together to obtain the desired result?
        answer: |
          Post-process results
      - question: What is the final step of qiskit patten?
        answer: |
          Post-process results is the final step.
      - question: What are some processing that could be performed in post-processing results?
        answer: |
          Classical data-processing steps such as visualizing results, readout error mitigation
          techniques, marginalizing quasi-probability distributions to ascertain results on smaller sets of qubits,
          or post-selection on inherent properties of the problem, such as total spin, parity, or particle conservation
          by removing unphysical observables.
  
  - context: |  
      The Evolution of IBM's Quantum Systems: Towards Error-Corrected Systems
      
      Looking ahead, IBM's roadmap focuses on enhancing error correction one of the essential aspects of making
      quantum systems more reliable. Error correction helps extend and improve quantum coherence and computational reach,
      enabling the system to process more complex algorithms. IBM's development roadmap highlights that by 2025, 
      the company plans to integrate error mitigation techniques within Qiskit Primitives, forming a robust foundation 
      for developers to build quantum workflows.
      
      The primitives are computational building blocks for larger applications with input units primitive unified blocs
      that need quantum resources to efficiently produce outputs. This update will allow algorithms to function with
      reduced noise, improving circuit quality and overall computation speed.
      
      In the same timeframe, according to the roadmap, IBM aims to demonstrate a 1,000+ qubit system called "Flamingo".
      This system is designed as a modular assembly of processors, each containing multiple chips. The goal is to scale
      quantum systems significantly while maintaining performance and error rates. Such advancements are steps toward
      IBM's vision of a utility-scale quantum supercomputer, capable of processing large-scale problems across
      multiple domains such as security, chemistry, and optimization.
      
      Pushing Boundaries With Next-Gen Systems And Devices
      
      Beyond 2025, IBM plans to launch the Starling system, a modular, error-corrected quantum supercomputer capable of
      running 100 million gates. This system represents IBM's ongoing efforts to refine error correction codes and 
      incorporate dedicated classical hardware, ensuring computational efficiency and speed. The integration of 
      classical and quantum nodes into a cohesive network aims to streamline resource management, enhancing 
      the capability to tackle increasingly complex computations.
      
      The longer-term outlook includes the Blue Jay system, a quantum supercomputer projected to incorporate 
      100,000 qubits by integrating thousands of logical qubits. IBM expects Blue Jay to achieve the capacity of running 
      up to 1 billion gates, offering a scalable platform that could potentially unlock general applications in areas 
      like security, machine learning, and materials discovery. Middleware improvements are also planned, focusing on 
      noise-free quantum computations managed by distributed software tools working in tandem with classical resources.
    questions_and_answers:
      - question: What is the goal of the Flamingo quantum system?
        answer: |
          The goal is to scale quantum systems significantly while maintaining performance and error rates.
      - question: What will be the characteristics of the Starling quantum system?
        answer: |  
          The Starling system will be a modular, error-corrected quantum supercomputer capable of running 100 million gates.
      - question: What are some potential applications for the Blue Jay quantum supercomputer?
        answer: |
          Blue Jay could potentially unlock general applications in areas like security, machine learning, and materials
          discovery.
        
  - context: |  
      Middleware and Automation: Enabling Scalable Quantum Computing
      A core component of IBM's quantum roadmap is the development of advanced middleware that automates
      and optimizes quantum workloads. Middleware is vital for distributing tasks across quantum and classical systems,
      ensuring efficient resource utilization. In 2025, IBM plans to introduce serverless tools,
      allowing users to focus on developing algorithms without managing the underlying infrastructure.
      Such tools are crucial for scaling quantum computing into everyday use, making the technology
      accessible for a broader range of applications.
      
      The automation features in IBM's middleware include intelligent orchestration, which analyzes workflows 
      to identify the optimal allocation of QPUs, communication channels, and classical resources. 
      These advancements aim to extend the quantum system's reach, providing seamless 
      operations even as the technology scales up.
      
      Enhancing the Developer Experience With Qiskit And Code Assistants As some of the pieces have already
      been mentioned, Qiskit is obviously an important part of the quantum roadmap. 
      IBM released Qiskit in 2017 to serve as a first-of-its-kind research tool. 
      According to IBM documentation, It offered an open-source, Python-based software development kit, 
      library and framework to program quantum computers. 
      Seven years, 100 releases, 550 open-source contributions, 550,000 users, and 3 trillion quantum circuits later, 
      Qiskit 1.0 arrives as a mature Python package for running large-scale quantum experiments.
      
      To foster a growing developer community and accelerate application development, 
      BM has integrated the Qiskit platform with Generative AI tools and AI-powered tools like Code Assistant. 
      (Here's a recent breakdown on Qiskit Code Assistant on The Quantum Insider.) 
      These tools are designed to streamline quantum programming, helping developers write code more efficiently 
      and optimize circuits for specific hardware. As quantum systems become more complex, having accessible 
      programming tools will be essential for expanding quantum computing's use cases beyond specialized research labs.
      
      IBM's approach also includes the development of higher-level APIs and domain-specific libraries within Qiskit, 
      aimed at abstracting the complexities of quantum circuits. By transitioning to a function-based paradigm, 
      IBM seeks to make quantum technology more usable, ultimately opening up opportunities for industries 
      ranging from pharmaceuticals to logistics.
      
      Towards 2033 and Beyond: IBM's Quantum Ambitions IBM's long-term quantum ambitions extend well into the next decade.
      The company aims to build systems capable of handling thousands of qubits, offering users a robust platform for
      tackling vast computational challenges. By leveraging scalable architectures and efficient error correction 
      echniques, IBM envisions a future where quantum computers are an integral part of solving complex problems
      beyond the reach of classical systems.
    
      The roadmap also emphasizes the integration of quantum systems with classical computing resources to create a
      truly heterogeneous computing environment. This fusion is seen as the key to unlocking the full potential of
      quantum-centric supercomputing, enabling breakthroughs in fields like cryptography, artificial intelligence,
      and large-scale optimization.
      
    questions_and_answers: 
      - question: What is the role of middleware in quantum computers?
        answer: |
          Middleware is vital for distributing tasks across quantum and classical systems, ensuring efficient resource
          utilization.
      - question: What has IBM done to accelerate quantum application development?
        answer: |  
          IBM has integrated the Qiskit platform with Generative AI tools and AI-powered tools like Code Assistant.
      - question: What is IBM doing to abstract the complexities of quantum circuits?
        answer: |
          IBM's approach includes the development of higher-level APIs and domain-specific libraries within Qiskit
          to abstract the complexities of quantum circuits.
        
document:
  repo: 'https://github.com/ermahendraswain/qiskit_knowledge/blob/main/qiskit_roadmap_pattern_knowledge_latest.md'
  commit: a9e1cd41b33858339b5bd76a9c17d3db4e0da4b2
  patterns:
    - qiskit_roadmap_pattern_knowledge_latest.md